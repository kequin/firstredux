{"ast":null,"code":"export default function getMathHandler(str) {\n  const math = getMathFn();\n  let divByZero = false;\n  return applyMath(str);\n  /***/\n\n  function applyMath(math_str) {\n    divByZero = false;\n    throwUnmatchedScopes(math_str);\n    math_str = deepRemoveScopes(math_str);\n    math_str = autoCorrect(math_str);\n    let result = parseLinearMath(math_str);\n    return divByZero ? \"Караул, тут делят на ноль!\" : result;\n  }\n\n  function deepRemoveScopes(str) {\n    str = autoCorrect(str);\n    let index = str.indexOf(\"(\");\n    if (index === -1) return parseLinearMath(str);\n    let scope = \"(\";\n    let open = 1;\n\n    for (let i = index + 1; i <= 100000; i++) {\n      if (i === 100000) console.log(\"Кажется пошел бесконечный цикл\");\n      scope += str[i];\n\n      if (str[i] === \"(\") {\n        open++;\n      } else if (str[i] === \")\") {\n        open--;\n      }\n\n      if (open === 0) {\n        return deepRemoveScopes(str.replace(scope, deepRemoveScopes(scope.slice(1, -1))));\n      }\n    }\n  }\n\n  function parseLinearMath(math_str) {\n    math_str = autoCorrect(math_str);\n    math_str = mul_div(math_str);\n    math_str = plus_minus(math_str);\n    return math_str;\n    /***/\n\n    function mul_div(math_str) {\n      let length = (math_str.match(/\\/|\\*/g) || []).length;\n      if (!length) return math_str;\n\n      for (let i = 0; i < length; i++) {\n        math_str = math_str.replace(/(\\d+(?:\\.\\d+)?)(\\/|\\*)(-?\\d+(?:\\.\\d+)?)/, function (_, a, oper, b) {\n          return math(a, oper, b);\n        });\n        math_str = autoCorrect(math_str);\n      }\n\n      return math_str;\n    }\n\n    function plus_minus(math_str) {\n      let length = (math_str.match(/\\+|-/g) || []).length;\n      if (!length) return math_str;\n\n      for (let i = 0; i < length; i++) {\n        math_str = math_str.replace(/((?:^-)?\\d+(?:\\.\\d+)?)(\\+|-)(\\d+(?:\\.\\d+)?)/, function (_, a, oper, b) {\n          return math(a, oper, b);\n        });\n        math_str = autoCorrect(math_str);\n      }\n\n      return math_str;\n    }\n  }\n\n  function autoCorrect(math_str) {\n    return math_str // Замены:\n    .replace(/\\s/g, \"\") // Удалить все пробелы\n    .replace(/\\(\\)/g, \"\") // Убрать пустые скобки\n    .replace(/--/g, \"+\") // Два минуса подряд → Плюс\n    .replace(/(\\+\\+|\\*\\*|\\/\\/)/g, (_, oper) => oper[0]) // Двойные плюсы, умножения и пр → на один\n    .replace(/\\+-|-\\+/g, \"-\") // Плюс после минуса и наоборот → на минус\n    .replace(/\\)\\(/g, \")*(\") // Две скобки подряд → вставить умножение\n    .replace(/(\\d)\\(/g, \"$1*(\") // Число и сразу скобка → умножение\n    .replace(/\\)(\\d)/g, \")*$1\") // Скобка и сразу число → умножение\n    .replace(/(\\/|\\*)\\+/g, \"$1\") // *+ или /+ → убрать плюс\n    ;\n  }\n\n  function throwUnmatchedScopes(math_str) {\n    let scopes_open = (math_str.match(/\\(/g) || []).length;\n    let scopes_close = (math_str.match(/\\)/g) || []).length;\n\n    if (scopes_open !== scopes_close) {\n      throw new Error(\"Unmatched parenthesis at \" + math_str);\n    }\n  }\n\n  function getMathFn() {\n    let local_math = {\n      \"+\": (a, b) => Number(a) + Number(b),\n      \"-\": (a, b) => a - b,\n      \"*\": (a, b) => a * b,\n      \"/\": (a, b) => {\n        if (b === \"0\") {\n          divByZero = true;\n        }\n\n        return a / b;\n      }\n    };\n    return function math(a, operation, b) {\n      return local_math[operation](a, b);\n    };\n  }\n}","map":{"version":3,"sources":["/home/taiga/Рабочий стол/govno/firstredax/src/assets/applyMath.js"],"names":["getMathHandler","str","math","getMathFn","divByZero","applyMath","math_str","throwUnmatchedScopes","deepRemoveScopes","autoCorrect","result","parseLinearMath","index","indexOf","scope","open","i","console","log","replace","slice","mul_div","plus_minus","length","match","_","a","oper","b","scopes_open","scopes_close","Error","local_math","Number","operation"],"mappings":"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","sourcesContent":["export default function getMathHandler(str) {\n    const math = getMathFn();  \n    let divByZero = false;\n  \n    return applyMath(str);\n    \n    /***/\n  \n    function applyMath(math_str) {\n      divByZero = false;    \n      throwUnmatchedScopes(math_str);\n      \n      math_str = deepRemoveScopes(math_str);    \n      math_str = autoCorrect(math_str);\n  \n      let result = parseLinearMath(math_str);\n      return divByZero ? \"Караул, тут делят на ноль!\" : result;\n    }\n  \n  \n    function deepRemoveScopes(str) {    \n      str = autoCorrect(str);\n      \n      let index = str.indexOf(\"(\");\n      if( index === -1 ) return parseLinearMath(str);\n      \n      let scope = \"(\";\n      let open = 1;\n      \n      for( let i = index + 1; i <= 100000; i++ ) {\n        if( i === 100000 ) console.log(\"Кажется пошел бесконечный цикл\");\n        \n        scope += str[i];\n        \n        if( str[i] === \"(\" ) {\n          open++;\n        } else if( str[i] === \")\" ) {\n          open--;\n        }\n        \n        if( open === 0 ) {\n          return deepRemoveScopes( str.replace(scope, deepRemoveScopes( scope.slice(1, -1) ) ) );\n        }\n      }\n    }\n    \n    function parseLinearMath(math_str) {\n      math_str = autoCorrect(math_str);\n      math_str = mul_div(math_str);\n      math_str = plus_minus(math_str);\n  \n      return math_str;\n  \n      /***/\n  \n      function mul_div(math_str) {\n        let length = (math_str.match(/\\/|\\*/g) || []).length;\n        if (!length) return math_str;\n  \n        for (let i = 0; i < length; i++) {\n          math_str = math_str.replace(\n            /(\\d+(?:\\.\\d+)?)(\\/|\\*)(-?\\d+(?:\\.\\d+)?)/,\n            function(_, a, oper, b) {\n              return math(a, oper, b);\n            }\n          );\n  \n          math_str = autoCorrect(math_str);\n        }\n  \n        return math_str;\n      }\n  \n      function plus_minus(math_str) {\n        let length = (math_str.match(/\\+|-/g) || []).length;\n        if (!length) return math_str;\n  \n        for (let i = 0; i < length; i++) {\n          math_str = math_str.replace(\n            /((?:^-)?\\d+(?:\\.\\d+)?)(\\+|-)(\\d+(?:\\.\\d+)?)/,\n            function(_, a, oper, b) {\n              return math(a, oper, b);\n            }\n          );\n  \n          math_str = autoCorrect(math_str);\n        }\n  \n        return math_str;\n      }\n    }\n  \n    function autoCorrect(math_str) {\n      return (math_str               // Замены:\n        .replace(/\\s/g, \"\")          // Удалить все пробелы\n        .replace(/\\(\\)/g, \"\")        // Убрать пустые скобки\n        .replace(/--/g, \"+\")         // Два минуса подряд → Плюс\n        .replace(/(\\+\\+|\\*\\*|\\/\\/)/g, (_, oper) => oper[0])\n                 // Двойные плюсы, умножения и пр → на один\n        .replace(/\\+-|-\\+/g, \"-\")    // Плюс после минуса и наоборот → на минус\n        .replace(/\\)\\(/g, \")*(\")     // Две скобки подряд → вставить умножение\n        .replace(/(\\d)\\(/g, \"$1*(\")  // Число и сразу скобка → умножение\n        .replace(/\\)(\\d)/g, \")*$1\")  // Скобка и сразу число → умножение\n        .replace(/(\\/|\\*)\\+/g, \"$1\") // *+ или /+ → убрать плюс\n      );\n    }\n  \n    function throwUnmatchedScopes(math_str) {\n      let scopes_open = (math_str.match(/\\(/g) || []).length;\n      let scopes_close = (math_str.match(/\\)/g) || []).length;\n  \n      if (scopes_open !== scopes_close) {\n        throw new Error(\"Unmatched parenthesis at \" + math_str);\n      }\n    }\n  \n    function getMathFn() {\n      let local_math = {\n        \"+\": (a, b) => Number(a) + Number(b),\n        \"-\": (a, b) => a - b,\n        \"*\": (a, b) => a * b,\n        \"/\": (a, b) => {\n          if( b === \"0\" ) {\n            divByZero = true;\n          }\n          \n          return (a / b);\n        },\n      };\n  \n      return function math(a, operation, b) {\n        return local_math[operation](a, b);\n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}